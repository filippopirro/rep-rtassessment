version: '2'

services:

  zookeeper:
    image: confluentinc/cp-zookeeper:6.0.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - docker-kafka-nifi-schemaregistry

  kafka:
    image: confluentinc/cp-kafka:6.0.0
    container_name: kafka
    depends_on:
      - zookeeper
    networks:
      - docker-kafka-nifi-schemaregistry
    hostname: kafka
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      # Setup 2 listeners
      # Port 29092 - available for within docker environment - other services will connect here
      # Port 9092 - published outside to be used by clients
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  schema-registry:
    image: confluentinc/cp-schema-registry:6.0.0
    container_name: schema-registry
    depends_on:
      - kafka
      - zookeeper # added by me
    networks:
      - docker-kafka-nifi-schemaregistry
    hostname: schema-registry
    ports:
      - 8085:8085
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8085
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka:29092

  rest-proxy:
    image: confluentinc/cp-kafka-rest:6.0.0
    container_name: rest-proxy
    depends_on:
      - zookeeper # added by me
      - kafka
      - schema-registry
    networks:
      - docker-kafka-nifi-schemaregistry
    hostname: rest-proxy
    ports:
      - 8082:8082
    environment:
      KAFKA_REST_HOST_NAME: rest-proxy
      KAFKA_REST_LISTENERS: "http://0.0.0.0:8082"
      KAFKA_REST_SCHEMA_REGISTRY_URL: schema-registry:8085
      KAFKA_REST_BOOTSTRAP_SERVERS: kafka:29092
      KAFKA_REST_SECURITY_PROTOCOL: "PLAINTEXT"
      KAFKA_REST_CLIENT_SECURITY_PROTOCOL: "PLAINTEXT"

  nifi:
    image: apache/nifi:latest
    container_name: nifi
    depends_on:
      - zookeeper
      - kafka
      - schema-registry
    networks:
      - docker-kafka-nifi-schemaregistry
    hostname: nifi
    ports:
      - 8080:8080
    environment:
      - NIFI_WEB_HTTP_PORT=8080
      - NIFI_CLUSTER_IS_NODE=true
      - NIFI_CLUSTER_NODE_PROTOCOL_PORT=8082
      - NIFI_ZK_CONNECT_STRING=zookeeper:2181
      - NIFI_ELECTION_MAX_WAIT=1 min
      - NIFI_SENSITIVE_PROPS_KEY=jfh7sk9345jf

  ksqldb-server:
    image: confluentinc/ksqldb-server:0.23.1
    hostname: ksqldb-server
    container_name: ksqldb-server
    depends_on:
      #- broker
      - zookeeper # added by me
      - kafka
      - schema-registry
    ports:
      - "8088:8088"
    volumes:
      - "./extensions/:/opt/ksqldb-udfs"
    environment:
      KSQL_LISTENERS: "http://0.0.0.0:8088"
      KSQL_BOOTSTRAP_SERVERS: "kafka:29092"
      #KSQL_BOOTSTRAP_SERVERS: "kafka:9092"
      KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: "true"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: "true"
      # Configuration for UDFs
      KSQL_KSQL_EXTENSION_DIR: "/opt/ksqldb-udfs"
    networks:
      - docker-kafka-nifi-schemaregistry

  ksql-cli:
    image: confluentinc/ksqldb-cli:0.23.1
    depends_on:
      - ksqldb-server
      - zookeeper # added by me
    volumes:
      - $PWD/ksql-scripts/:/data/scripts/
    entrypoint: 
      - /bin/bash
      - -c
      - |
        echo -e "\n\n⏳ Waiting for ksqlDB to be available before launching CLI\n"
        while [ $$(curl -s -o /dev/null -w %{http_code} http://0.0.0.0:8088/) -eq 000 ]
        do 
          echo -e $$(date) "ksqlDB Server HTTP state: " $$(curl -s -o /dev/null -w %{http_code} http://0.0.0.0:8088/) " (waiting for 200)"
          sleep 5
        done
        echo -e "\n\n-> Running SQL commands\n"
        cat /data/scripts/my-ksql-script.sql <(echo 'EXIT')| ksql http://0.0.0.0:8088
        echo -e "\n\n-> Sleeping…\n"
        sleep infinity
    #tty: true
    networks:
      - docker-kafka-nifi-schemaregistry

#-----------------------------------------------------------------------

# Use dedicated network that will be discarded with docker-compose down
networks:

  docker-kafka-nifi-schemaregistry:
    driver: bridge
